{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Clone GitHub Repository",
      "detail": "Import dependencies with vcs tool.",
      "type": "shell",
      "command": "git clone ${input:repoURL}",
      "options": {
        "cwd": "${workspaceFolder}/src"
      },
      "problemMatcher": []
    },
    {
      "label": "Install Dependencies",
      "detail": "Install all dependencies specified in the workspaces package.xml files.",
      "type": "shell",
      "command": "sudo apt-get update -y && rosdep update && rosdep install --from-paths src --ignore-src -y",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": []
    },
    {
      "label": "Build --DEBUG",
      "detail": "Build the workspace (release).",
      "type": "shell",
      "command": "colcon build --merge-install --symlink-install --cmake-args '-DCMAKE_BUILD_TYPE=$BUILD_TYPE' '-DCMAKE_EXPORT_COMPILE_COMMANDS=On' -Wall -Wextra -Wpedantic",
      "options": {
        "cwd": "${workspaceFolder}",
        "env": {
          "BUILD_TYPE": "Debug"
        }
      },
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": "$gcc"
    },
    {
      "label": "Build --RELEASE",
      "detail": "Build the workspace (release).",
      "type": "shell",
      "command": "colcon build --merge-install --symlink-install --cmake-args '-DCMAKE_BUILD_TYPE=$BUILD_TYPE' '-DCMAKE_EXPORT_COMPILE_COMMANDS=On' -Wall -Wextra -Wpedantic",
      "options": {
        "cwd": "${workspaceFolder}",
        "env": {
          "BUILD_TYPE": "Release"
        }
      },
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": "$gcc"
    },
    {
      "label": "Build --RelWithDebInfo",
      "detail": "Build the workspace (release).",
      "type": "shell",
      "command": "colcon build --merge-install --symlink-install --cmake-args '-DCMAKE_BUILD_TYPE=$BUILD_TYPE' '-DCMAKE_EXPORT_COMPILE_COMMANDS=On' -Wall -Wextra -Wpedantic",
      "options": {
        "cwd": "${workspaceFolder}",
        "env": {
          "BUILD_TYPE": "RelWithDebInfo"
        }
      },
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": "$gcc"
    },
    {
      "label": "Test",
      "detail": "Run all unit tests and show results.",
      "type": "shell",
      "command": "colcon test",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": []
    },
    {
      "label": "Purge",
      "detail": "Purge workspace by deleting all generated files.",
      "type": "shell",
      "command": "rm -fr build install log && py3clean .",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": []
    },
    {
      "label": "Clean",
      "detail": "Run the clean target",
      "type": "shell",
      "command": "colcon build --merge-install --cmake-target clean ",
      "problemMatcher": "$gcc"
    },
    {
      "label": "Run Rviz2",
      "detail": "Run the clean target",
      "type": "shell",
      "command": "ros2 run rviz2 rviz2",
      "problemMatcher": []
    },
    {
      "label": "Run PlotJuggler",
      "detail": "Run the clean target",
      "type": "shell",
      "command": "ros2 run plotjuggler plotjuggler",
      "problemMatcher": []
    },
    {
      "label": "Run Foxglove Bridge",
      "detail": "Run the clean target",
      "type": "shell",
      "command": "ros2 run foxglove_bridge foxglove_bridge",
      "problemMatcher": []
    },
    {
      "label": "Create a new package",
      "detail": "Create a new ROS cpp package from a template.",
      "type": "shell",
      "command": "source /opt/ros/${env:ROS_DISTRO}/setup.bash ; ros2 pkg create --destination-directory src/${input:subfolder} --build-type ${input:buildType} ${input:packageName}",
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": []
    },
    {
      "label": "Create a new package from ros_team_ws template",
      "detail": "Create a new ROS 2 package from ros_team_ws template.",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "ROS_WS=${workspaceFolder} ${env:RTW}/scripts/create-new-package.bash  ${input:packageName} '${input:packageDescription}'"
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "options": {
        "cwd": "${workspaceFolder}/src/${input:subfolder}"
      }
    },
    {
      "label": "Setup robot_description package",
      "detail": "Setup robot description from rtw template.",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "ROS_WS=${workspaceFolder} ${env:RTW}/scripts/setup-robot-description.bash  ${input:robotName}"
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "options": {
        "cwd": "${workspaceFolder}/src/${input:subfolder}/${input:targetPackageName}"
      }
    },
    {
      "label": "Setup robot_bringup package",
      "detail": "Setup robot bringup from rtw template.",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "ROS_WS=${workspaceFolder} ${env:RTW}/scripts/setup-robot-bringup.bash  ${input:robotName}  ${input:descriptionPackageName}"
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "options": {
        "cwd": "${workspaceFolder}/src/${input:targetPackageName}"
      }
    },
    {
      "label": "Setup ros2_control hardware_interface package",
      "detail": "Setup ros2_control control hardware interface from rtw template.",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "ROS_WS=${workspaceFolder} ${env:RTW}/scripts/ros2_control/setup-hardware-interface-package.bash  ${input:fileName}  ${input:className}"
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "options": {
        "cwd": "${workspaceFolder}/src/${input:targetPackageName}"
      }
    },
    {
      "label": "Setup ros2_control controller package",
      "detail": "Setup ros2_control controller from rtw template.",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "ROS_WS=${workspaceFolder} ${env:RTW}/scripts/ros2_control/setup-controller-package.bash  ${input:fileName} ."
      ],
      "problemMatcher": [],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "options": {
        "cwd": "${workspaceFolder}/src/${input:targetPackageName}"
      }
    }
  ],
  "inputs": [
    {
      "id": "repoURL",
      "type": "promptString",
      "description": "Paste the git repo url to be clone"
    },
    {
      "id": "packageName",
      "type": "promptString",
      "description": "Package name"
    },
    {
      "id": "buildType",
      "type": "pickString",
      "description": "Choose build type of package",
      "options":[
        "ament_python",
        "ament_cmake"
      ]
    },
    {
      "id": "subfolder",
      "type": "promptString",
      "description": "project subfolder name, if dont have subfolder in src just press enter"
    },
    {
      "id": "packageDescription",
      "type": "promptString",
      "description": "Package Description"
    },
    {
      "id": "robotName",
      "type": "promptString",
      "description": "Robot Name"
    },
    {
      "id": "targetPackageName",
      "type": "promptString",
      "description": "Target package name"
    },
    {
      "id": "descriptionPackageName",
      "type": "promptString",
      "description": "Description Package Name"
    },
    {
      "id": "fileName",
      "type": "promptString",
      "description": "File Name"
    },
    {
      "id": "className",
      "type": "promptString",
      "description": "Class Name"
    }
  ]
}